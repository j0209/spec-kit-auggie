Using Auggie in your automations
Print Mode: Add the --print flag (e.g., auggie --print "your instruction") to execute the instruction once without the UI. This mode exits immediately without prompting for additional input. Perfect for automation, CI/CD pipelines, and background tasks where you want the agent to act without follow-up from a person.
Quiet Mode: --quiet flag (e.g., auggie --print --quiet "your instruction") to tell the agent to only reply back with a final output. Ideal when you need to use the agent to provide structured data back without all the steps it took to get there. Provides a simple, clean response.

Workspace context
Auggie will automatically index the current working directory or directory you specify to give Augment a full view of your system.

About Workspace Context
Augment is powered by its deep understanding of your code. Your codebase will be automatically indexed when you run auggie from a git directory or you can specify a directory to index. If you run Auggie from a non-git directory, a temporary workspace will be created for you.
Specifying a directory to index
To specify a directory other than the current working directory pass the target directory to the --workspace-root flag.

Copy

Ask AI
auggie --workspace-root /path/to/your/project


Index your workspace
When your workspace is indexed, Augment can provide tailored code suggestions and answers based on your unique codebase, best practices, coding patterns, and preferences. You can always control what files are indexed.

Security and privacy
Augment stores your code securely and privately to enable our powerful context engine. We ensure code privacy through a proof-of-possession API and maintain strict internal data minimization principles. Read more about our security.
What gets indexed
Augment will index all the files in your workspace, except for the files that match patterns in your .gitignore file and the .augmentignore file. Read more about Workspace Context.
Ignoring files with .augmentignore
The .augmentignore file is a list of file patterns that Augment will ignore when indexing your workspace. Create an .augmentignore file in the root of your workspace. You can use any glob pattern that is supported by the gitignore file.
Including files that are .gitignored
If you have a file or directory in your .gitignore that you want to be indexed, you can add it to your .augmentignore file using the ! prefix.
For example, you may want your node_modules indexed to provide Augment with context about the dependencies in their project, but it is typically included in their .gitignore. Add !node_modules to your .augmentignore file.

.augmentignore

.gitignore

Copy

Ask AI
# Include .gitignore excluded files with ! prefix
!node_modules

# Exclude other files with .gitignore syntax
data/test.json

Interactive mode
Use a rich interactive terminal experience to explore your codebase, build new features, debug issues, and integrate your tools.

Auggie is currently in beta and does not support all features available in the Augment plugins for Visual Studio Code or JetBrains IDEs.
About interactive mode
Auggie is an agentic terminal-based code assistant that has deep codebase knowledge powered by Augment’s context engine. Auggie can help you understand a new codebase, fix bugs quickly, and build new features faster. Auggie has access to your connected integrations and MCP servers and can pull in additional context or run tools to get your tasks done.
Using interactive mode
Run auggie without any mode flags to get the full-screen terminal user interface with rich interactive features, real-time streaming of responses, and visual progress indicators. This mode shows all tool calls, results, and allows ongoing conversation through an intuitive interface.

Copy

Ask AI
# Start Auggie in interactive mode
auggie

# Provide an initial instruction
auggie "Look at my open issues and prioritize the highest impact ones for me"
Multi-line input
Entering a new line in the input box depends on your terminal configuration and platform. You can use Ctrl + J to enter a new line in any terminal. See below for instructions to configure your terminal to use Option + Enter to enter a new line.
Terminal application	New line shortcut
All terminals	Ctrl + J
MacOS Terminal (see below)	Option + Enter
iTerm2 (see below)	Option + Enter
VS Code Terminal	Option + Enter
Ghostty	Shift + Enter
MacOS Terminal
Go to Terminal > Settings... > Profiles > Keyboard
Check Use option key as meta key
iTerm2
Go to iTerm2 > Settings... > Profiles > Keys
Check Left or Right option key acts as Esc+
Reference
Shortcuts
Command	Description
Ctrl + P	Enhance your prompt with codebase context
Escape	Interrupt the active agent
Ctrl + C	Interrupt the active agent
Escape + Escape	Clear the input box
Ctrl + C	Press twice to exit
Ctrl + D	Press twice to exit
Up Arrow	Cycle through previous messages
Down Arrow	Cycle through previous messages
Ctrl + O	Open current input in external editor, inserts text on exit
Slash Commands
Command	Description
/account	Show account information
/clear	Clear the input box
/editor	Open current input in external editor, inserts text on exit
/exit	Exit Auggie
/feedback	Provide feedback to the Augment team
/github-workflow	Generate a GitHub Action workflow
/help	Show help
/logout	Logout of Augment
/mcp-status	View the status of all configured MCP servers
/model	Select the model for this session
/new	Start a new conversation with no message history
/permissions	View and manage tool permissions
/request-id	Show the request ID for the current conversation
/task	Open task manager to add, edit, and manage tasks
/verbose	Toggle verbose output for tools
/vim	Toggle Vim mode for advanced text editing

Using Task Manager
Use /task to break down complex problems into manageable steps.

About the Task Manager
The Auggie CLI task manager allows you to break down complex problems into discrete, manageable actions and track your progress through each step. It’s particularly useful for automation workflows and keeping the agent focused on multi-step tasks.
The task manager maintains state per session and stores tasks under ~/.augment for persistence across CLI sessions.
Activating the Task Manager
Start Auggie in interactive mode and use the /task slash command:

Copy

Ask AI
# Start Auggie in interactive mode
auggie

# Then type the slash command
/task
This opens the task manager interface, which takes over the main panel and provides a focused environment for task management.
Alternative Access
You can also ask the agent to create a task list for you:

Copy

Ask AI
auggie "Start a task list to implement user authentication"
The agent will automatically create and populate a task list when it encounters complex, multi-step problems.
Task Manager Interface
The task manager provides a scrollable interface with comprehensive theming and visual feedback. When active, it replaces the main chat interface to provide a focused task management experience.
Navigation and Interaction
Use your keyboard to interact with the Task Manager:
Key	Action
↑ / ↓	Navigate between tasks. The active task is highlighted with • next to the [ ] Task Title.
J / K	Alternative vim-style navigation (up/down)
A	Add a new task
E	Edit the active task’s title and description
D	Delete the active task
Spacebar	Toggle task status
Esc	Dismiss the Task Manager
Task Status Indicators
Tasks have three distinct states with corresponding visual status indicators:
[ ] Not Started - Empty checkbox, task has not been started
[✓] Done - Checkmark, task has been completed
[-] Cancelled - Dash, task has been cancelled or is no longer needed
Working with Tasks
Creating Tasks
Manual Creation:
Press A to add a new task
Enter the task title when prompted
Optionally add a description for more detailed context
Agent-Generated Tasks: The agent automatically creates tasks inside the Task Manager when it encounters complex problems. You can also explicitly request task creation:

Copy

Ask AI
"Create a task list to refactor the authentication system"
Editing Tasks
Navigate to the desired task using arrow keys or J/K
Press E to edit
Modify the title first, then the description
The task manager provides inline editing with clear visual feedback
Task Execution
Manual Execution:
Use the task list as a checklist, manually updating status as you complete work
Toggle status with Spacebar to track progress
Agent Execution: You can ask the agent to work on specific tasks from the task manager:

Copy

Ask AI
"Work on the first incomplete task in my task list"
"Complete the database migration task"
The agent will access your task list and update task status as it works.
Advanced Features
Task Hierarchy and Subtasks
The task manager supports nested task structures:
Main tasks can have subtasks for complex workflows
Subtasks are automatically indented and organized hierarchically
Navigate through nested structures using standard navigation keys
Persistence and Sessions
Tasks are automatically saved per session under ~/.augment
Task lists persist across CLI restarts within the same session
Each conversation session maintains its own task list
Integration with Agent Workflow
The task manager is designed to work seamlessly with agent automation:
Keeps agents focused: Provides clear structure for multi-step workflows
Progress tracking: Agent can update task status as it completes work
Context preservation: Tasks maintain context across long conversations
Automation-friendly: Particularly useful for non-interactive automation workflows
Use Cases and Examples
Development Workflow

Copy

Ask AI
auggie "Create a task list to implement user registration feature"
# Agent creates tasks like:
# [ ] Design user registration API endpoints
# [ ] Create user model and database schema
# [ ] Implement registration validation
# [ ] Add password hashing and security
# [ ] Write unit tests for registration
# [ ] Update API documentation
Code Refactoring

Copy

Ask AI
auggie "Break down refactoring the payment system into tasks"
# Agent creates structured tasks for complex refactoring
Bug Investigation

Copy

Ask AI
auggie "Create tasks to investigate and fix the login timeout issue"
# Agent creates systematic debugging tasks
Tips for Effective Task Management
Be Specific: Create clear, actionable task descriptions
Break Down Complex Work: Use subtasks for multi-step processes
Regular Updates: Keep task status current for accurate progress tracking
Agent Collaboration: Let the agent help create and organize task structures
Session Organization: Use task lists to maintain focus across long sessions
Troubleshooting
Task Manager Won’t Open:
Ensure you’re in interactive mode (auggie without -p flag)
Try typing /task exactly as shown
Check that you’re not in the middle of another operation
Tasks Not Persisting:
Tasks are saved per session - starting a new session creates a new task list
Check that ~/.augment directory has proper write permissions
Navigation Issues:
Use either arrow keys (↑/↓) or vim keys (J/K) for navigation
Ensure the task manager has focus (not in edit mode)
Related Features
Prompt Enhancer - Enhance task descriptions with context
Keyboard Shortcuts - Learn other useful CLI shortcuts
Slash Commands - Discover other interactive commands

Custom Slash Commands
Create and manage custom slash commands for frequently-used prompts and workflows.

About Custom Slash Commands
Custom slash commands let you create reusable prompts stored as Markdown files that Auggie can run. You can organize commands by scope (workspace or user) and use directory structures for namespacing.
Syntax

Copy

Ask AI
/<command-name> [arguments]
Parameters
Parameter	Description
<command-name>	Name derived from the Markdown filename
[arguments]	Optional arguments passed to the command
Command Types and Locations
Custom commands are stored in markdown files and can be placed in multiple locations with a specific order of precedence:
Command Locations (in order of precedence)
User Commands: ~/.augment/commands/<name>.md (user)
Workspace Commands: ./.augment/commands/<name>.md (workspace)
Claude Code Commands: ./.claude/commands/<name>.md (.claude)
User Commands
Commands available across all your projects. These are user-wide and persist across different workspaces.
Location: ~/.augment/commands/

Copy

Ask AI
# Create a global command
mkdir -p ~/.augment/commands
echo "Review this code for security vulnerabilities:" > ~/.augment/commands/security-review.md
Workspace Commands
Commands stored in your repository and shared with your team. These are workspace-specific and can be committed to version control.
Location: ./.augment/commands/

Copy

Ask AI
# Create a workspace command
mkdir -p .augment/commands
echo "Analyze this code for performance issues and suggest optimizations:" > .augment/commands/optimize.md
Claude Code Compatibility
Auggie automatically detects and supports commands from ./.claude/commands/ for compatibility with existing Claude Code setups. This allows teams already using Claude Code to continue using their existing command libraries without modification.
Location: ./.claude/commands/ and ~/.claude/commands/
Migration: While ./.claude/commands/ is supported for compatibility, we recommend migrating to ./.augment/commands/ for new projects to maintain consistency with Auggie’s naming conventions.
Features
Namespacing
Organize commands in subdirectories. Commands from nested directories can be accessed using the namespace:command syntax, where the namespace corresponds to the subdirectory name.
For example, a file at .augment/commands/frontend/component.md creates the command /frontend:component.
Conflicts between user and workspace level commands are not supported and will be defined in order of precedence above.
Arguments
Pass dynamic values to commands.

Copy

Ask AI
# Command definition
echo 'Fix issue following our coding standards' > .augment/commands/fix-issue.md

# Usage
> /fix-issue 123
Frontmatter
Command files support frontmatter for metadata:
Frontmatter	Purpose	Default
description	Brief description of the command	Uses the first line from the prompt
argument-hint	Expected arguments format that will be displayed after typing in a command	None
model	Specify the model to run this command with (overrides the CLI default)	Uses the CLI default model
File: ~/.augment/commands/deploy-staging.md

Copy

Ask AI
---
description: Deploy the application to staging with health checks
argument-hint: [branch-name]
model: gpt-4o
---

Deploy the application to the staging environment:

1. Run all tests to ensure code quality
2. Build the application for production
3. Deploy to staging server
4. Run health checks to verify deployment
5. Send notification to team channel
Command Line Execution
We also provide the ability to execute custom commands from the command line using the auggie command <your_command> or list them with auggie command list. For complete command-line reference, see CLI Reference for Custom Commands.

Copy

Ask AI
# Execute a custom command
auggie command deploy-staging

# List all available commands (including custom ones)
auggie command list
Custom commands appear in the help output with their descriptions:

Copy

Ask AI
Available custom commands:
  auggie command deploy-staging    # Deploy the application to staging
  auggie command security-review   # Review code for security vulnerabilities
Example Commands
For ready-to-use examples of custom slash commands, including code review templates, bug fix guides, and feature implementation plans, see:
Custom Commands Examples
Best Practices
Use kebab-case naming for command names (e.g., deploy-staging, run-tests)
Keep names descriptive but concise, avoiding spaces and special characters
Use meaningful prefixes for related commands (e.g., deploy-staging, deploy-production)
Include clear descriptions in frontmatter for better discoverability
Break complex workflows into numbered steps for clarity
Use user commands (~/.augment/commands/) for personal workflows across all projects
Use workspace commands (./.augment/commands/) for team-shared, project-specific tasks
Organize with subdirectories for related command groups using namespacing
Document command purpose and expected outcomes clearly
Version your commands when making significant changes
See Also
Custom Commands Examples - Ready-to-use command templates and examples
Interactive Mode Slash Commands - Learn about Auggie’s interactive terminal features
CLI Reference for Custom Commands - Complete reference for command-line flags

CLI Flags and Options
A comprehensive reference for all command-line flags available in the Auggie CLI.

CLI flags
Command	Description
auggie	Start Auggie in interactive mode
auggie --print	Output simple text for one instruction and exit
auggie --quiet	Output only the final response for one instruction and exit
auggie --compact	Output tool calls, results, and final response as one line each and exit
Input
Command	Description
auggie "Fix the typescript errors"	Provide an initial instruction in interactive mode
auggie --print "Summarize the staged changes"	Provide an instruction and exit
cat file | auggie --print "Summarize this data"	Pipe content through stdin
auggie --print "Summarize this data" < file.txt	Provide input from a file
auggie --instruction "Fix the errors"	Provide an initial instruction in interactive mode
auggie --instruction-file /path/to/file.txt	Provide an instruction by file in interactive mode
Custom Commands
Command	Description
auggie command <command-name>	Execute a custom command from .augment/commands/ or ~/.augment/commands/
Custom commands are reusable instructions stored as markdown files. They can be placed in:
~/.augment/commands/<name>.md - Global commands (user-wide)
./.augment/commands/<name>.md - Project commands (workspace-specific)
~/.claude/commands/<name>.md - Claude Code user commands
./.claude/commands/<name>.md - Claude Code workspace commands
Commands are resolved in order of precedence, with Auggie-specific locations taking priority over Claude Code locations.
Examples:

Copy

Ask AI
# Execute a custom deployment command
auggie command deploy-staging

# Execute a code review command
auggie command security-review

# List available commands (shown in help output)
auggie command help
See Custom Commands for detailed information on creating and managing custom commands.
Sessions
Command	Description
auggie --continue (-c)	Resumes the previous conversation
auggie --dont-save-session	Do not save the conversation to the local history
auggie --delete-saved-sessions	Delete all saved sessions from disk
Configuration
Command	Description
auggie --workspace-root /path/to/project	Specify the root of the workspace
auggie --rules /path/to/rules.md	Additional rules to append to workspace guidelines
auggie --model "name"	Select the model to use (accepts long or short names from the model list)
Models
List out available models and their short names to be passed into the --model flag
Command	Description
auggie --list-models	List available models
auggie -lm	Shorthand for --list-models
Tool permissions can be configured in settings.json files. See Permissions for detailed configuration.
MCP and integrations
Command	Description
auggie --mcp-config {key: value}	MCP configuration as a JSON string
auggie --mcp-config /path/to/mcp.json	MCP configuration from a JSON file
Authentication
Command	Description
auggie --login	Login to Augment and store the token locally
auggie --logout	Remove the locally stored token
auggie --print-augment-token	Print the locally stored token
Additional commands
Command	Description
auggie --help	Show help
auggie --version	Show version
Environment Variables
Variable	Description
AUGMENT_SESSION_AUTH	Authentication JSON.
AUGMENT_API_URL	Backend API endpoint
AUGMENT_API_TOKEN	Authentication token
GITHUB_API_TOKEN	GitHub API token
Custom Rules Files
Auggie automatically loads custom rules and guidelines from several file locations to provide context-aware assistance. These files help Auggie understand your project’s conventions, coding standards, and preferences.
Supported Rules Files
Auggie looks for rules files in the following order of precedence:
Custom rules file (via --rules flag): /path/to/custom-rules.md
CLAUDE.md: Compatible with Claude Code and other AI tools
AGENTS.md: Compatible with Cursor and other AI development tools
Workspace guidelines: .augment/guidelines.md (legacy format)
File Locations
Workspace Root Files:
CLAUDE.md - Root-level rules file compatible with Claude Code
AGENTS.md - Root-level rules file compatible with Cursor and other tools
Augment Directory Files:
.augment/guidelines.md - Legacy workspace guidelines file
.augment/rules/ - Directory containing multiple rule files (IDE feature)
Rules File Format
Rules files should be written in Markdown format with natural language instructions. Here’s the recommended structure:

Copy

Ask AI
# Project Guidelines

## Code Style
- Use TypeScript for all new JavaScript files
- Follow the existing naming conventions in the codebase
- Add JSDoc comments for all public functions and classes

## Architecture
- Follow the MVC pattern established in the codebase
- Place business logic in service classes
- Keep controllers thin and focused on request/response handling

## Testing
- Write unit tests for all new functions
- Maintain test coverage above 80%
- Use Jest for testing framework

## Dependencies
- Prefer built-in Node.js modules when possible
- Use npm for package management
- Pin exact versions in package.json for production dependencies
Example Rules Files
Basic Project Rules (CLAUDE.md):

Copy

Ask AI
# Development Guidelines

- Use semantic commit messages following conventional commits
- Run `npm run lint` before committing changes
- Update documentation when adding new features
- Follow the existing error handling patterns
- Use environment variables for configuration
Framework-Specific Rules (AGENTS.md):

Copy

Ask AI
# React Project Guidelines

## Component Development
- Use functional components with hooks
- Implement proper TypeScript interfaces for props
- Follow the established folder structure in src/components/

## State Management
- Use React Context for global state
- Keep component state local when possible
- Use custom hooks for complex state logic

## Styling
- Use CSS modules for component styling
- Follow the design system tokens defined in src/styles/tokens.css
- Ensure responsive design for mobile and desktop
Backend API Rules:

Copy

Ask AI
# API Development Guidelines

## Endpoint Design
- Follow RESTful conventions for URL structure
- Use appropriate HTTP status codes
- Include proper error messages in responses

## Database
- Use Prisma ORM for database operations
- Write database migrations for schema changes
- Include proper indexing for query performance

## Security
- Validate all input parameters
- Use JWT tokens for authentication
- Implement rate limiting on public endpoints
Using Custom Rules Directory
You can specify a custom directory for Auggie’s configuration files:

Copy

Ask AI
# Use custom directory instead of .augment
auggie --augment-cache-dir /path/to/custom-config

# This will look for rules in:
# /path/to/custom-config/guidelines.md
# /path/to/custom-config/rules/
Best Practices for Rules Files
Be Specific: Provide clear, actionable guidelines rather than vague suggestions
Use Examples: Include code examples when describing patterns or conventions
Keep Updated: Regularly review and update rules as your project evolves
Be Concise: Focus on the most important guidelines to avoid overwhelming the AI
Test Guidelines: Verify that Auggie follows your rules by testing with sample requests
